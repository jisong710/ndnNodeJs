import { Name } from "@ndn/packet";
/**
 * KV store provider where each key is a string.
 * Methods are called one at a time.
 */
export interface StoreProvider<T> {
    /**
     * Indicate whether the store provider supports the structured clone algorithm.
     * If false, values must be serialized as JSON.
     */
    readonly canSClone: boolean;
    list: () => Promise<string[]>;
    get: (key: string) => Promise<T>;
    insert: (key: string, value: T) => Promise<void>;
    erase: (key: string) => Promise<void>;
}
/** Memory based KV store provider. */
export declare class MemoryStoreProvider<T> implements StoreProvider<T> {
    readonly canSClone: boolean;
    protected record: Record<string, T>;
    list(): Promise<string[]>;
    get(key: string): Promise<T>;
    insert(key: string, value: T): Promise<void>;
    erase(key: string): Promise<void>;
}
/** KV store where each key is a Name. */
export declare abstract class StoreBase<T> {
    private readonly provider;
    private readonly mutex;
    constructor(provider: StoreProvider<T>);
    get canSClone(): boolean;
    /** List item names. */
    list(): Promise<Name[]>;
    /** Erase item by name. */
    erase(name: Name): Promise<void>;
    protected getValue(name: Name): Promise<T>;
    protected insertValue(name: Name, value: T): Promise<void>;
    protected bufferToStorable(input: Uint8Array | string): Uint8Array | string;
}
export declare namespace StoreBase {
    function bufferFromStorable(input: Uint8Array | string): Uint8Array;
}
