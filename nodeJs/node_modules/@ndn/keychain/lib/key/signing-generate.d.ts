import type { NameLike } from "@ndn/packet";
import type { KeyChain } from "../store/mod.js";
import { type NamedSigner, type NamedVerifier, type SigningAlgorithm } from "./types.js";
type SigningOptG<I, Asym extends boolean, G> = {} extends G ? [SigningAlgorithm<I, Asym, G>, G?] : [SigningAlgorithm<I, Asym, G>, G];
/** Generate a pair of signer and verifier with the default ECDSA signing algorithm. */
export declare function generateSigningKey(name: NameLike): Promise<[NamedSigner.PrivateKey, NamedVerifier.PublicKey]>;
/** Generate a pair of signer and verifier with the default ECDSA signing algorithm, and save to KeyChain. */
export declare function generateSigningKey(keyChain: KeyChain, name: NameLike): Promise<[NamedSigner.PrivateKey, NamedVerifier.PublicKey]>;
/** Generate a pair of signer and verifier. */
export declare function generateSigningKey<I, Asym extends boolean, G>(name: NameLike, ...a: SigningOptG<I, Asym, G>): Promise<[NamedSigner<Asym>, NamedVerifier<Asym>]>;
/** Generate a pair of signer and verifier, and save to KeyChain. */
export declare function generateSigningKey<I, Asym extends boolean, G>(keyChain: KeyChain, name: NameLike, ...a: SigningOptG<I, Asym, G>): Promise<[NamedSigner<Asym>, NamedVerifier<Asym>]>;
export {};
