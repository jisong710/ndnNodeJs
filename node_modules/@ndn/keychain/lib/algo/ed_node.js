import { SigType, Verifier } from "@ndn/packet";
import { crypto } from "@ndn/util";
import { Ed25519Algorithm, polyfillEd25519 } from "@yoursunny/webcrypto-ed25519";
import { extractSpkiAlgorithm } from "./impl-spki_node.js";
polyfillEd25519();
class NodeEd {
    uuid;
    sigType;
    algo;
    oid;
    constructor(uuid, sigType, algo, oid) {
        this.uuid = uuid;
        this.sigType = sigType;
        this.algo = algo;
        this.oid = oid;
    }
    keyUsages = {
        private: ["sign"],
        public: ["verify"],
    };
    async cryptoGenerate({ importPkcs8 }, extractable) {
        let privateKey;
        let publicKey;
        if (importPkcs8) {
            const [pkcs8, spki] = importPkcs8;
            [privateKey, publicKey] = await Promise.all([
                crypto.subtle.importKey("pkcs8", pkcs8, this.algo, extractable, this.keyUsages.private),
                crypto.subtle.importKey("spki", spki, this.algo, true, this.keyUsages.public),
            ]);
        }
        else {
            ({ privateKey, publicKey } = await crypto.subtle.generateKey(this.algo, extractable, [...this.keyUsages.private, ...this.keyUsages.public]));
        }
        const spki = new Uint8Array(await crypto.subtle.exportKey("spki", publicKey));
        return {
            privateKey,
            publicKey,
            jwkImportParams: this.algo,
            spki,
            info: {},
        };
    }
    async importSpki(spki, der) {
        if (extractSpkiAlgorithm(der) !== this.oid) {
            throw new Error(`not ${this.algo.name} key`);
        }
        const key = await crypto.subtle.importKey("spki", spki, this.algo, true, this.keyUsages.public);
        return {
            publicKey: key,
            spki,
            info: {},
        };
    }
    makeLLSign({ privateKey }) {
        return async (input) => {
            const raw = await crypto.subtle.sign(this.algo, privateKey, input);
            return new Uint8Array(raw);
        };
    }
    makeLLVerify({ publicKey }) {
        return async (input, sig) => {
            const ok = await crypto.subtle.verify(this.algo, publicKey, sig, input);
            Verifier.throwOnBadSig(ok);
        };
    }
}
/** Ed25519 signing algorithm. */
export const Ed25519 = new NodeEd("fa9e8104-39b1-4a8e-828d-8c557d973476", SigType.Ed25519, Ed25519Algorithm, "2B6570");
