export declare type Parser<TReturn = any> = (serializedValue: string) => TReturn;
export declare const string: Parser<string>;
export declare const boolean: Parser<boolean>;
export declare const integer: Parser<number>;
export declare const float: Parser<number>;
export declare const email: Parser<string>;
export declare const url: Parser<string>;
export declare const ipAddress: Parser<string>;
export declare const port: Parser<number>;
export declare function whitelist<TValue extends string>(whitelistedValues: readonly TValue[]): Parser<TValue>;
export declare function regex(pattern: RegExp): Parser<string>;
export declare type ArrayParserArgs<TType> = Readonly<{
    parser: Parser<TType>;
    separator?: string;
}>;
export declare function array<TType>(args: ArrayParserArgs<TType>): Parser<readonly TType[]>;
export declare const positiveInteger: Parser<number>;
export declare const nonPositiveInteger: Parser<number>;
export declare const negativeInteger: Parser<number>;
export declare const nonNegativeInteger: Parser<number>;
//# sourceMappingURL=parsers.d.ts.map