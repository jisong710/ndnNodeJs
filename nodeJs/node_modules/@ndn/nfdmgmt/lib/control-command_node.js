import { Endpoint } from "@ndn/endpoint";
import { Component, digestSigning, Interest, Name, SignedInterestPolicy, TT } from "@ndn/packet";
import { Decoder, Encoder } from "@ndn/tlv";
import { ControlParameters } from "./control-parameters_node.js";
import { ControlResponse } from "./control-response_node.js";
const defaultSIP = new SignedInterestPolicy(SignedInterestPolicy.Nonce(), SignedInterestPolicy.Time());
/** NFD Management - Control Command client. */
export var ControlCommand;
(function (ControlCommand) {
    ControlCommand.localhostPrefix = new Name("/localhost/nfd");
    ControlCommand.localhopPrefix = new Name("/localhop/nfd");
    function getPrefix(isLocal) {
        return (isLocal ?? false) ? ControlCommand.localhostPrefix : ControlCommand.localhopPrefix;
    }
    ControlCommand.getPrefix = getPrefix;
    /** Invoke a command and wait for response. */
    async function call(command, params, { endpoint = new Endpoint(), commandPrefix: prefix = ControlCommand.localhostPrefix, signer = digestSigning, signedInterestPolicy = defaultSIP, } = {}) {
        const interest = new Interest(new Name([
            ...prefix.comps,
            ...command.split("/"),
            new Component(TT.GenericNameComponent, Encoder.encode(new ControlParameters(params))),
        ]));
        await signedInterestPolicy.makeSigner(signer).sign(interest);
        const data = await endpoint.consume(interest, { describe: `ControlCommand(${command})` });
        return new Decoder(data.content).decode(ControlResponse);
    }
    ControlCommand.call = call;
})(ControlCommand || (ControlCommand = {}));
