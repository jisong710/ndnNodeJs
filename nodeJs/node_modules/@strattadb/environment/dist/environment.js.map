{"version":3,"sources":["../src/environment.ts"],"names":["makeEnv","schema","processEnv","process","env","Object","entries","reduce","acc","key","schemaEntry","value","getValue","envVarValue","envVarName","undefined","required","message","description","EnvironmentVariableError","defaultValue","parseEnvVarValue","serializedValue","parser","error"],"mappings":";;;;;;;AAAA;;AAEA;;;;AA4CA;AACA;AACA;AACO,SAASA,OAAT,CACLC,MADK,EAELC,UAA6B,GAAGC,OAAO,CAACC,GAFnC,EAGa;AAClB,uBAAS,sBAAT;AAEA,QAAMA,GAAG,GAAGC,MAAM,CAACC,OAAP,CAAeL,MAAf,EAAuBM,MAAvB,CAA8B,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,WAAN,CAAN,KAA6B;AACrE,UAAMC,KAAK,GAAGC,QAAQ,CAACH,GAAD,EAAMC,WAAN,EAAmBR,UAAnB,CAAtB;AAEA,WAAO,EAAE,GAAGM,GAAL;AAAU,OAACC,GAAD,GAAOE;AAAjB,KAAP;AACD,GAJW,EAIT,EAJS,CAAZ;AAMA,uBAAS,sBAAT,EAAiCP,GAAjC;AAEA,SAAOA,GAAP;AACD;;AAED,SAASQ,QAAT,CACEH,GADF,EAEEC,WAFF,EAGER,UAHF,EAIS;AACP,QAAMW,WAAW,GAAGX,UAAU,CAACQ,WAAW,CAACI,UAAb,CAA9B;;AAEA,MAAID,WAAW,KAAKE,SAApB,EAA+B;AAC7B,QAAIL,WAAW,CAACM,QAAhB,EAA0B;AACxB,UAAIC,OAAO,GAAI,GAAEP,WAAW,CAACI,UAAW,6BAAxC;;AAEA,UAAIJ,WAAW,CAACQ,WAAhB,EAA6B;AAC3BD,QAAAA,OAAO,IAAK,2BAA0BP,WAAW,CAACQ,WAAY,EAA9D;AACD;;AAED,YAAM,IAAIC,iCAAJ,CAA6BF,OAA7B,CAAN;AACD;;AAED,WAAOP,WAAW,CAACU,YAAnB;AACD;;AAED,QAAMT,KAAK,GAAGU,gBAAgB,CAACZ,GAAD,EAAMI,WAAN,EAAmBH,WAAnB,CAA9B;AAEA,SAAOC,KAAP;AACD;;AAED,SAASU,gBAAT,CACEZ,GADF,EAEEa,eAFF,EAGEZ,WAHF,EAIS;AACP,MAAIC,KAAJ;;AAEA,MAAI;AACFA,IAAAA,KAAK,GAAGD,WAAW,CAACa,MAAZ,CAAmBD,eAAnB,CAAR;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIL,iCAAJ,CACH,GAAEV,GAAI,gCACJe,KAAD,CAAiBP,OAClB,WAAUK,eAAgB,GAHvB,CAAN;AAKD;;AAED,SAAOX,KAAP;AACD","sourcesContent":["import EnvironmentVariableError from './EnvironmentVariableError';\nimport { Parser } from './parsers';\nimport { logDebug } from './debug';\n\nexport type Env<TSchemaData> = {\n  [TKey in keyof TSchemaData]: TSchemaData[TKey];\n};\n\n/**\n * A schema defines the environment variable\n * requirements.\n */\nexport type Schema<TSchemaData> = {\n  [TKey in keyof TSchemaData]: SchemaEntry<TSchemaData[TKey]>;\n};\n\nexport type SchemaEntry<TType> = {\n  /**\n   * The parser function used to parse\n   * the environment variable string.\n   */\n  parser: Parser<TType>;\n  /**\n   * The name of the environment variable variable to look up.\n   */\n  envVarName: string;\n  /**\n   * Helper text describing the variable.\n   */\n  description?: string;\n} & SchemaEntryRequiredInfo<TType>;\n\nexport type SchemaEntryRequiredInfo<TType> =\n  | {\n      required: true;\n      defaultValue?: undefined;\n    }\n  | {\n      required: false;\n      /**\n       * The default value to be used if the env variable is not defined.\n       * It will not be parsed or validated.\n       */\n      defaultValue: TType;\n    };\n\n/**\n * Returns an env object based on a schema.\n */\nexport function makeEnv<TSchemaData extends Record<string, any>>(\n  schema: Schema<TSchemaData>,\n  processEnv: NodeJS.ProcessEnv = process.env,\n): Env<TSchemaData> {\n  logDebug('making env object...');\n\n  const env = Object.entries(schema).reduce((acc, [key, schemaEntry]) => {\n    const value = getValue(key, schemaEntry, processEnv);\n\n    return { ...acc, [key]: value };\n  }, {}) as Env<TSchemaData>;\n\n  logDebug('env object ready: %o', env);\n\n  return env;\n}\n\nfunction getValue<TType>(\n  key: string,\n  schemaEntry: SchemaEntry<TType>,\n  processEnv: NodeJS.ProcessEnv,\n): TType {\n  const envVarValue = processEnv[schemaEntry.envVarName];\n\n  if (envVarValue === undefined) {\n    if (schemaEntry.required) {\n      let message = `${schemaEntry.envVarName} is required but is not set`;\n\n      if (schemaEntry.description) {\n        message += `. Variable description: ${schemaEntry.description}`;\n      }\n\n      throw new EnvironmentVariableError(message);\n    }\n\n    return schemaEntry.defaultValue;\n  }\n\n  const value = parseEnvVarValue(key, envVarValue, schemaEntry);\n\n  return value;\n}\n\nfunction parseEnvVarValue<TType>(\n  key: string,\n  serializedValue: string,\n  schemaEntry: SchemaEntry<TType>,\n): TType {\n  let value: TType;\n\n  try {\n    value = schemaEntry.parser(serializedValue);\n  } catch (error) {\n    throw new EnvironmentVariableError(\n      `${key} has invalid format. Reason: ${\n        (error as Error).message\n      }. Got: '${serializedValue}'`,\n    );\n  }\n\n  return value;\n}\n"],"file":"environment.js"}