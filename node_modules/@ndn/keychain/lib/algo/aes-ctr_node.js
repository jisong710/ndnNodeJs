import { __importDefault, __importStar } from "tslib";
import _cjsDefaultImport0 from "mnemonist/default-weak-map.js"; const DefaultWeakMap = __importDefault(_cjsDefaultImport0).default;
import { CounterIvGen } from "../iv/mod_node.js";
import { AesBlockSize, AesCommon } from "./aes-common_node.js";
const ivgens = new DefaultWeakMap(({ info: { counterLength } }) => new CounterIvGen({
    ivLength: AESCTR.ivLength,
    counterBits: counterLength,
    blockSize: AesBlockSize,
}));
/**
 * AES-CTR encryption algorithm.
 *
 * Initialization Vectors must be 16 octets.
 * During encryption, if IV is unspecified, it is constructed with two parts:
 * @li a 64-bit random number, generated each time a private key instance is constructed;
 * @li a 64-bit counter starting from zero.
 *
 * During decryption, quality of IV is not automatically checked.
 * Since the security of AES-CTR depends on having unique IVs, the application is recommended to
 * check IVs using CounterIvChecker type.
 */
export const AESCTR = new (class extends AesCommon {
    name = "AES-CTR";
    uuid = "0ec985f2-88c0-4dd9-8b69-2c41bd639809";
    ivLength = 16;
    getIvGen(key) {
        return ivgens.get(key);
    }
    allowAdditionalData = false;
    tagSize = 0;
    defaultInfo = {
        counterLength: 64,
    };
    modifyParams(params, { counterLength }) {
        params.counter = params.iv;
        delete params.iv;
        params.length = counterLength;
    }
})();
