import { EvDecoder, NNI } from "@ndn/tlv";
import { toUtf8 } from "@ndn/util";
const TT = {
    ControlResponse: 0x65,
    StatusCode: 0x66,
    StatusText: 0x67,
};
const EVD = new EvDecoder("ControlResponse", TT.ControlResponse)
    .add(TT.StatusCode, (t, { nni }) => t.statusCode = nni)
    .add(TT.StatusText, (t, { text, after }) => {
    t.statusText = text;
    t.body = after;
})
    .setIsCritical(() => false);
/** NFD Management ControlResponse struct. */
export class ControlResponse {
    statusCode;
    statusText;
    body;
    static decodeFrom(decoder) {
        return EVD.decode(new ControlResponse(), decoder);
    }
    constructor(statusCode = 0, statusText = "", body) {
        this.statusCode = statusCode;
        this.statusText = statusText;
        this.body = body;
    }
    encodeTo(encoder) {
        encoder.prependTlv(TT.ControlResponse, [TT.StatusCode, NNI(this.statusCode)], [TT.StatusText, toUtf8(this.statusText)], this.body);
    }
}
