import { crypto } from "@ndn/util";
import { RsaCommon } from "./rsa-common_node.js";
/** RSA-OAEP encryption algorithm. */
export const RSAOAEP = new (class extends RsaCommon {
    constructor() {
        super("RSA-OAEP", "SHA-1");
    }
    uuid = "f9c1c143-a7a5-459c-8cdf-69c5f7191cfe";
    keyUsages = { private: ["decrypt"], public: ["encrypt"] };
    makeLLEncrypt({ publicKey }) {
        return async ({ plaintext, additionalData, }) => {
            const ciphertext = new Uint8Array(await crypto.subtle.encrypt({
                name: this.name,
                label: additionalData,
            }, publicKey, plaintext));
            return { ciphertext };
        };
    }
    makeLLDecrypt({ privateKey }) {
        return async ({ ciphertext, additionalData, }) => {
            const plaintext = new Uint8Array(await crypto.subtle.decrypt({
                name: this.name,
                label: additionalData,
            }, privateKey, ciphertext));
            return { plaintext };
        };
    }
})();
