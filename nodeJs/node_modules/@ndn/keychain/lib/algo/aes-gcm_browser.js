import { __importDefault, __importStar } from "tslib";
import _cjsDefaultImport0 from "mnemonist/default-weak-map.js"; const DefaultWeakMap = __importDefault(_cjsDefaultImport0).default;
import { CounterIvGen } from "../iv/mod_browser.js";
import { AesBlockSize, AesCommon } from "./aes-common_browser.js";
const ivgens = new DefaultWeakMap(() => new CounterIvGen({
    ivLength: AESGCM.ivLength,
    counterBits: 32,
    blockSize: AesBlockSize,
}));
/**
 * AES-GCM encryption algorithm.
 *
 * Initialization Vectors must be 12 octets.
 * During encryption, if IV is unspecified, it is constructed with two parts:
 * @li a 64-bit random number, generated each time a private key instance is constructed;
 * @li a 32-bit counter starting from zero.
 *
 * During decryption, quality of IV is not automatically checked.
 * Since the security of AES-GCM depends on having unique IVs, the application is recommended to
 * check IVs using CounterIvChecker type.
 */
export const AESGCM = new (class extends AesCommon {
    name = "AES-GCM";
    uuid = "a7e27aee-2f10-4150-bd6b-5e667c006274";
    ivLength = 12;
    getIvGen(key) {
        return ivgens.get(key);
    }
    allowAdditionalData = true;
    tagSize = 128 / 8;
    defaultInfo = {};
})();
