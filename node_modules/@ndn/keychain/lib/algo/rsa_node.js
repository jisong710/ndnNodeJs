import { SigType, Verifier } from "@ndn/packet";
import { crypto } from "@ndn/util";
import { RsaCommon } from "./rsa-common_node.js";
/** Sha256WithRsa signing algorithm. */
export const RSA = new (class extends RsaCommon {
    constructor() {
        super("RSASSA-PKCS1-v1_5");
    }
    uuid = "771b4ccd-3e8d-4ad5-9422-248f18c6fcb5";
    keyUsages = { private: ["sign"], public: ["verify"] };
    sigType = SigType.Sha256WithRsa;
    makeLLSign({ privateKey }) {
        return async (input) => {
            const raw = await crypto.subtle.sign(this.name, privateKey, input);
            return new Uint8Array(raw);
        };
    }
    makeLLVerify({ publicKey }) {
        return async (input, sig) => {
            const ok = await crypto.subtle.verify(this.name, publicKey, sig, input);
            Verifier.throwOnBadSig(ok);
        };
    }
})();
