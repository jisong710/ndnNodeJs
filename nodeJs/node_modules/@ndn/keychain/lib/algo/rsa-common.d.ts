import type * as asn1 from "@yoursunny/asn1";
import type { CryptoAlgorithm } from "../key/mod.js";
import type { RSA } from "./rsa.js";
export type RsaModulusLength = 2048 | 4096;
export declare namespace RsaModulusLength {
    const Default: RsaModulusLength;
    const Choices: readonly RsaModulusLength[];
}
export declare abstract class RsaCommon implements CryptoAlgorithm<{}, true, RSA.GenParams> {
    protected readonly name: string;
    constructor(name: string, hash?: AlgorithmIdentifier);
    abstract readonly uuid: string;
    abstract readonly keyUsages: Record<"private" | "public", readonly KeyUsage[]>;
    protected readonly importParams: RsaHashedImportParams;
    protected readonly genParams: RsaHashedKeyGenParams;
    cryptoGenerate({ modulusLength, importPkcs8 }: RSA.GenParams, extractable: boolean): Promise<{
        privateKey: CryptoKey;
        publicKey: CryptoKey;
        jwkImportParams: RsaHashedImportParams;
        spki: Uint8Array;
        info: {};
    }>;
    importSpki(spki: Uint8Array, der: asn1.ElementBuffer): Promise<{
        publicKey: CryptoKey;
        spki: Uint8Array;
        info: {};
    }>;
}
