import { assert } from "@ndn/util";
import * as CertNaming from "../naming_node.js";
import { KeyKind } from "./types_node.js";
class PlainCryptoDecrypter {
    constructor(algo, key) {
        const pvtkey = key;
        if (pvtkey.privateKey) {
            this[KeyKind] = "private";
            this.llDecrypt = algo.makeLLDecrypt(pvtkey);
        }
        else {
            this[KeyKind] = "secret";
            this.llDecrypt = algo.makeLLDecrypt(key);
        }
    }
    [KeyKind];
    llDecrypt;
}
class NamedCryptoDecrypter extends PlainCryptoDecrypter {
    name;
    constructor(name, algo, key) {
        super(algo, key);
        this.name = name;
        assert(CertNaming.isKeyName(name), `bad key name ${name}`);
    }
}
export function createDecrypter(arg1, arg2, arg3) {
    if (arg3) {
        return new NamedCryptoDecrypter(arg1, arg2, arg3);
    }
    return new PlainCryptoDecrypter(arg1, arg2);
}
