import { Name, TT } from "@ndn/packet";
import { EvDecoder, NNI } from "@ndn/tlv";
import { toUtf8 } from "@ndn/util";
const TtControlParameters = 0x68;
function decodeNNI({ nni }) {
    return nni;
}
function decodeString({ text }) {
    return text;
}
const fieldDefs = [
    [TT.Name, "name", (name) => name.value, ({ decoder }) => decoder.decode(Name)],
    [0x69, "faceId", NNI, decodeNNI],
    [0x72, "uri", toUtf8, decodeString],
    [0x81, "localUri", toUtf8, decodeString],
    [0x6F, "origin", NNI, decodeNNI],
    [0x6A, "cost", NNI, decodeNNI],
    [0x83, "capacity", NNI, decodeNNI],
    [0x84, "count", NNI, decodeNNI],
    [0x87, "baseCongestionMarkingInterval", NNI, decodeNNI],
    [0x88, "defaultCongestionPeriod", NNI, decodeNNI],
    [0x89, "mtu", NNI, decodeNNI],
    [0x6C, "flags", NNI, decodeNNI],
    [0x70, "mask", NNI, decodeNNI],
    [0x6B, "strategy", (name) => name, ({ vd }) => vd.decode(Name)],
    [0x6D, "expirationPeriod", NNI, decodeNNI],
    [0x85, "facePersistency", NNI, decodeNNI],
];
const EVD = new EvDecoder("ControlParameters", TtControlParameters)
    .setIsCritical(() => false);
for (const [tt, key, , decode] of fieldDefs) {
    EVD.add(tt, (t, tlv) => {
        t[key] = decode(tlv);
    });
}
/** NFD Management ControlParameters struct. */
// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging
export class ControlParameters {
    static decodeFrom(decoder) {
        return EVD.decode(new ControlParameters(), decoder);
    }
    constructor(value = {}) {
        Object.assign(this, value);
    }
    encodeTo(encoder) {
        encoder.prependTlv(TtControlParameters, ...fieldDefs.map(([tt, key, encodeValue]) => {
            const v = this[key];
            return v !== undefined && [tt, encodeValue(v)];
        }));
    }
}
