import { __importDefault, __importStar } from "tslib";
import { Name } from "@ndn/packet";
import { fromHex, toHex } from "@ndn/util";
import _cjsDefaultImport0 from "throat"; const throat = __importDefault(_cjsDefaultImport0).default;
/** Memory based KV store provider. */
export class MemoryStoreProvider {
    canSClone = true;
    record = {};
    async list() {
        return Object.keys(this.record);
    }
    async get(key) {
        const value = this.record[key];
        if (value === undefined) {
            throw new Error(`key ${key} is missing`);
        }
        return value;
    }
    async insert(key, value) {
        this.record[key] = value;
    }
    async erase(key) {
        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete this.record[key];
    }
}
/** KV store where each key is a Name. */
export class StoreBase {
    provider;
    mutex = throat(1);
    constructor(provider) {
        this.provider = provider;
    }
    get canSClone() { return this.provider.canSClone; }
    /** List item names. */
    async list() {
        const keys = await this.mutex(() => this.provider.list());
        return keys.map((k) => new Name(fromHex(k)));
    }
    /** Erase item by name. */
    erase(name) {
        return this.mutex(() => this.provider.erase(name.valueHex));
    }
    getValue(name) {
        return this.mutex(() => this.provider.get(name.valueHex));
    }
    insertValue(name, value) {
        return this.mutex(() => this.provider.insert(name.valueHex, value));
    }
    bufferToStorable(input) {
        if (!this.canSClone && input instanceof Uint8Array) {
            return toHex(input);
        }
        return input;
    }
}
(function (StoreBase) {
    function bufferFromStorable(input) {
        return input instanceof Uint8Array ? input : fromHex(input);
    }
    StoreBase.bufferFromStorable = bufferFromStorable;
})(StoreBase || (StoreBase = {}));
