{"version":3,"sources":["../src/parsers.ts"],"names":["string","serializedValue","boolean","truthyValues","falsyValues","lowercaseSerializedValue","toLowerCase","includes","validValuesString","join","EnvironmentVariableError","integer","validator","isInt","value","Number","parseInt","float","parseFloat","isNaN","email","isEmail","url","isURL","ipAddress","isIP","port","isPort","whitelist","whitelistedValues","whitelistParser","whitelistedValuesString","map","whitelistedValue","regex","pattern","regexParser","test","toString","defaultArraySeparator","array","args","separator","arrayParser","serializedArray","serializedValues","split","values","parser","positiveInteger","nonPositiveInteger","negativeInteger","nonNegativeInteger"],"mappings":"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","sourcesContent":["import validator from 'validator';\n\nimport EnvironmentVariableError from './EnvironmentVariableError';\n\nexport type Parser<TReturn = any> = (serializedValue: string) => TReturn;\n\n/**\n * Parses a string.\n */\nexport const string: Parser<string> = (serializedValue) => serializedValue;\n\n/**\n * Parses a boolean. parsed values are case insensitive.\n * Truthy values: true, 1, yes.\n * Falsy values: false, 0, no.\n */\nexport const boolean: Parser<boolean> = (serializedValue) => {\n  const truthyValues = ['true', '1', 'yes', 'on'];\n  const falsyValues = ['false', '0', 'no', 'off'];\n\n  const lowercaseSerializedValue = serializedValue.toLowerCase();\n\n  if (truthyValues.includes(lowercaseSerializedValue)) {\n    return true;\n  }\n\n  if (falsyValues.includes(lowercaseSerializedValue)) {\n    return false;\n  }\n\n  const validValuesString = [...truthyValues, ...falsyValues].join(' ');\n\n  throw new EnvironmentVariableError(\n    `value is not valid. Valid values: ${validValuesString}`,\n  );\n};\n\n/**\n * Parses an integer.\n */\nexport const integer: Parser<number> = (serializedValue) => {\n  if (!validator.isInt(serializedValue)) {\n    throw new EnvironmentVariableError('value is not an integer');\n  }\n\n  const value = Number.parseInt(serializedValue, 10);\n\n  return value;\n};\n\n/**\n * Parses a float.\n */\nexport const float: Parser<number> = (serializedValue) => {\n  const value = Number.parseFloat(serializedValue);\n\n  if (Number.isNaN(value)) {\n    throw new EnvironmentVariableError('value is not a number');\n  }\n\n  return value;\n};\n\n/**\n * Parses an email.\n */\nexport const email: Parser<string> = (serializedValue) => {\n  const value = serializedValue;\n\n  if (!validator.isEmail(value)) {\n    throw new EnvironmentVariableError('value is not an email');\n  }\n\n  return value;\n};\n\n/**\n * Parses a URL.\n */\nexport const url: Parser<string> = (serializedValue) => {\n  const value = serializedValue;\n\n  if (!validator.isURL(value)) {\n    throw new EnvironmentVariableError('value is not an URL');\n  }\n\n  return value;\n};\n\n/**\n * Parses an IP address.\n */\nexport const ipAddress: Parser<string> = (serializedValue) => {\n  const value = serializedValue;\n\n  if (!validator.isIP(value)) {\n    throw new EnvironmentVariableError('value is not an IP address');\n  }\n\n  return value;\n};\n\n/**\n * Parses a port number.\n */\nexport const port: Parser<number> = (serializedValue) => {\n  if (!validator.isPort(serializedValue)) {\n    throw new EnvironmentVariableError('value is not a port');\n  }\n\n  const value = Number.parseInt(serializedValue, 10);\n\n  return value;\n};\n\n/**\n * Returns a parser that parses a value from\n * a list of whitelisted values.\n */\nexport function whitelist<TValue extends string>(\n  whitelistedValues: readonly TValue[],\n): Parser<TValue> {\n  const whitelistParser: Parser<TValue> = (serializedValue) => {\n    const value = serializedValue;\n\n    if (!(whitelistedValues as readonly string[]).includes(value)) {\n      const whitelistedValuesString = whitelistedValues\n        .map((whitelistedValue) => `'${whitelistedValue}'`)\n        .join(', ');\n\n      throw new EnvironmentVariableError(\n        `value is not in the whitelist. Valid values are ${whitelistedValuesString}`,\n      );\n    }\n\n    return value as TValue;\n  };\n\n  return whitelistParser;\n}\n\n/**\n * Returns a parser that parses a value matching a regular expression.\n */\nexport function regex(pattern: RegExp): Parser<string> {\n  const regexParser: Parser<string> = (serializedValue) => {\n    const value = serializedValue;\n\n    if (!pattern.test(value)) {\n      throw new EnvironmentVariableError(\n        `value does not match regex ${pattern.toString()}`,\n      );\n    }\n\n    return value;\n  };\n\n  return regexParser;\n}\n\nexport type ArrayParserArgs<TType> = Readonly<{\n  parser: Parser<TType>;\n  separator?: string;\n}>;\n\nconst defaultArraySeparator = ',';\n\n/**\n * Returns a parser that parses a list of values of a type.\n */\nexport function array<TType>(\n  args: ArrayParserArgs<TType>,\n): Parser<readonly TType[]> {\n  const separator = args.separator || defaultArraySeparator;\n\n  const arrayParser: Parser<readonly TType[]> = (serializedArray) => {\n    const serializedValues = serializedArray.split(separator);\n\n    const values = serializedValues.map((serializedValue) =>\n      args.parser(serializedValue),\n    );\n\n    return values;\n  };\n\n  return arrayParser;\n}\n\n/**\n * Parses a positive integer.\n */\nexport const positiveInteger: Parser<number> = (serializedValue) => {\n  const value = integer(serializedValue);\n\n  if (value <= 0) {\n    throw new EnvironmentVariableError('value is not positive');\n  }\n\n  return value;\n};\n\n/**\n * Parses a non-positive integer.\n */\nexport const nonPositiveInteger: Parser<number> = (serializedValue) => {\n  const value = integer(serializedValue);\n\n  if (value > 0) {\n    throw new EnvironmentVariableError('value is positive');\n  }\n\n  return value;\n};\n\n/**\n * Parses a negative integer.\n */\nexport const negativeInteger: Parser<number> = (serializedValue) => {\n  const value = integer(serializedValue);\n\n  if (value >= 0) {\n    throw new EnvironmentVariableError('value is not negative');\n  }\n\n  return value;\n};\n\n/**\n * Parses a non-negative integer.\n */\nexport const nonNegativeInteger: Parser<number> = (serializedValue) => {\n  const value = integer(serializedValue);\n\n  if (value < 0) {\n    throw new EnvironmentVariableError('value is negative');\n  }\n\n  return value;\n};\n"],"file":"parsers.js"}