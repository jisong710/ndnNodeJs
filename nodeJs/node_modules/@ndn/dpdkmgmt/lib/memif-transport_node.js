import { once } from "node:events";
import { createRequire } from "node:module";
import { L3Face, rxFromPacketIterable, Transport, txToStream } from "@ndn/l3face";
// don't name this 'require' to avoid @typescript-eslint/no-require-imports
const cjsRequire = createRequire(import.meta.url);
/** Shared Memory Packet Interface (memif) transport. */
export class MemifTransport extends Transport {
    rx;
    tx;
    /**
     * Access the underlying Memif instance.
     * You may read counters and monitor "memif:up" "memif:down" events, but not send/receive packets.
     */
    memif;
    mtu_;
    constructor(opts, memif) {
        super({
            describe: `Memif(${opts.socketName}:${opts.id ?? 0})`,
            local: true,
            multicast: false,
        });
        this.memif = memif;
        this.mtu_ = Math.min(memif.dataroom, opts.dataroom ?? Infinity);
        this.rx = rxFromPacketIterable(this.memif);
        this.tx = txToStream(this.memif);
    }
    get mtu() { return this.mtu_; }
}
(function (MemifTransport) {
    /** Create a memif transport. */
    async function connect(opts) {
        const { waitUp = true, } = opts;
        const MemifConstructor = cjsRequire("memif").Memif;
        const transport = new MemifTransport(opts, new MemifConstructor(opts));
        if (waitUp) {
            await once(transport.memif, "memif:up");
        }
        return transport;
    }
    MemifTransport.connect = connect;
    /** Create a memif transport and add to forwarder. */
    MemifTransport.createFace = L3Face.makeCreateFace(connect);
})(MemifTransport || (MemifTransport = {}));
