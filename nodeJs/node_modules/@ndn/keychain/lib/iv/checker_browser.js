import { assert } from "@ndn/util";
/**
 * Initialization Vector checker.
 *
 * The .wrap() method creates an LLDecrypt.Key or LLDecrypt that checks the IV in each message
 * before and after decryption, and updates the internal state of this class. Typically, a
 * separate IvChecker instances should be used for each key.
 */
export class IvChecker {
    ivLength;
    constructor(ivLength) {
        this.ivLength = ivLength;
        assert(ivLength > 0);
    }
    wrap(arg1) {
        if (typeof arg1.llDecrypt === "function") {
            return this.wrapKey(arg1);
        }
        return this.wrapLLDecrypt(arg1);
    }
    wrapKey(key) {
        const f = this.wrapLLDecrypt((...args) => key.llDecrypt(...args));
        return new Proxy(key, {
            get(target, prop, receiver) {
                if (prop === "llDecrypt") {
                    return f;
                }
                return Reflect.get(target, prop, receiver);
            },
        });
    }
    wrapLLDecrypt(f) {
        return async (params) => {
            const { ciphertext, iv } = params;
            if (iv?.length !== this.ivLength) {
                throw new Error("IV is missing or has wrong length");
            }
            const result = await f(params);
            this.check(iv, result.plaintext.length, ciphertext.length);
            return result;
        };
    }
}
