import { type Component, Data, type Name, type Signer } from "@ndn/packet";
import type { CryptoAlgorithm, NamedSigner, PublicKey } from "../key/mod.js";
import { ValidityPeriod } from "./validity-period.js";
/**
 * NDN Certificate v2.
 * This type is immutable.
 */
export declare class Certificate {
    readonly data: Data;
    readonly validity: ValidityPeriod;
    static fromData(data: Data): Certificate;
    private constructor();
    get name(): Name;
    get issuer(): Name | undefined;
    get isSelfSigned(): boolean;
    /** Ensure certificate is within validity period. */
    checkValidity(now?: ValidityPeriod.TimestampInput): void;
    /** Public key in SubjectPublicKeyInfo (SPKI) binary format. */
    get publicKeySpki(): Uint8Array;
    /** Import SPKI as public key. */
    importPublicKey<I, A extends CryptoAlgorithm<I>>(algoList: readonly A[]): Promise<[A, CryptoAlgorithm.PublicKey<I>]>;
}
export declare namespace Certificate {
    interface BuildOptions {
        /** Certificate name. */
        name: Name;
        /** Certificate packet FreshnessPeriod, default is 1 hour. */
        freshness?: number;
        /** ValidityPeriod. */
        validity: ValidityPeriod;
        /** Public key in SubjectPublicKeyInfo (SPKI) binary format. */
        publicKeySpki: Uint8Array;
        /** Issuer signing key. */
        signer: Signer;
    }
    /** Build a certificate from fields. */
    function build({ name, freshness, validity, publicKeySpki, signer, }: BuildOptions): Promise<Certificate>;
    interface IssueOptions {
        /** Certificate packet FreshnessPeriod, default is 1 hour. */
        freshness?: number;
        /** ValidityPeriod. */
        validity: ValidityPeriod;
        /** IssuerId in certificate name. */
        issuerId: Component;
        /** Issuer signing key. */
        issuerPrivateKey: Signer;
        /** Public key to appear in certificate. */
        publicKey: PublicKey;
    }
    /** Create a certificated signed by issuer. */
    function issue(opts: IssueOptions): Promise<Certificate>;
    interface SelfSignOptions {
        /** Certificate packet FreshnessPeriod, default is 1 hour. */
        freshness?: number;
        /** ValidityPeriod, default is maximum validity. */
        validity?: ValidityPeriod;
        /** Private key corresponding to public key. */
        privateKey: NamedSigner;
        /** Public key to appear in certificate. */
        publicKey: PublicKey;
    }
    /** Create a self-signed certificate. */
    function selfSign(opts: SelfSignOptions): Promise<Certificate>;
}
