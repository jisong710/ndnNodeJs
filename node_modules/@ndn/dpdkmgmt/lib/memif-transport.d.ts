import { L3Face, Transport } from "@ndn/l3face";
import type { Memif } from "memif";
/** Shared Memory Packet Interface (memif) transport. */
export declare class MemifTransport extends Transport {
    readonly rx: Transport.Rx;
    readonly tx: Transport.Tx;
    /**
     * Access the underlying Memif instance.
     * You may read counters and monitor "memif:up" "memif:down" events, but not send/receive packets.
     */
    readonly memif: Memif;
    private readonly mtu_;
    constructor(opts: MemifTransport.Options, memif: Memif);
    get mtu(): number;
}
export declare namespace MemifTransport {
    interface Options extends Memif.Options {
        /**
         * Whether to wait until the connection is up.
         * Default is true;
         */
        waitUp?: boolean;
    }
    /** Create a memif transport. */
    function connect(opts: Options): Promise<MemifTransport>;
    /** Create a memif transport and add to forwarder. */
    const createFace: L3Face.CreateFaceFunc<MemifTransport, [opts: Options]>;
}
