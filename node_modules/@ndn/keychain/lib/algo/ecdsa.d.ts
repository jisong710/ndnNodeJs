import type { SigningAlgorithm } from "../key/mod.js";
declare const PointSizes: {
    "P-256": number;
    "P-384": number;
    "P-521": number;
};
export type EcCurve = keyof typeof PointSizes;
export declare namespace EcCurve {
    const Default: EcCurve;
    const Choices: readonly ("P-256" | "P-384" | "P-521")[];
}
/** Sha256WithEcdsa signing algorithm. */
export declare const ECDSA: SigningAlgorithm<ECDSA.Info, true, ECDSA.GenParams>;
export declare namespace ECDSA {
    /** Key generation parameters. */
    interface GenParams {
        /** Pick EC curve. Default is P-256. */
        curve?: EcCurve;
        /** Import PKCS#8 private key and SPKI public key instead of generating. */
        importPkcs8?: [pkcs8: Uint8Array, spki: Uint8Array];
    }
    interface Info {
        curve: EcCurve;
    }
}
export {};
