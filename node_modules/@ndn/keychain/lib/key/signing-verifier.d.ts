import { type Name, Verifier } from "@ndn/packet";
import type { Certificate, ValidityPeriod } from "../cert/mod.js";
import { type CryptoAlgorithm, type NamedVerifier, type SigningAlgorithm } from "./types.js";
/** Create a plain verifier from crypto key. */
export declare function createVerifier<I>(algo: SigningAlgorithm<I>, key: CryptoAlgorithm.PublicSecretKey<I>): Verifier;
/** Create a named verifier from crypto key. */
export declare function createVerifier<I, Asym extends boolean>(name: Name, algo: SigningAlgorithm<I, Asym>, key: CryptoAlgorithm.PublicSecretKey<I>): NamedVerifier<Asym>;
/** Create a named verifier from certificate public key. */
export declare function createVerifier(cert: Certificate, opts?: createVerifier.ImportCertOptions): Promise<NamedVerifier.PublicKey>;
export declare namespace createVerifier {
    /** createVerifier options when importing public key from a certificate. */
    interface ImportCertOptions {
        /**
         * List of recognized algorithms.
         * Default is SigningAlgorithmListSlim.
         * Use SigningAlgorithmListFull for all algorithms, at the cost of larger bundle size.
         */
        algoList?: readonly SigningAlgorithm[];
        /**
         * Whether to check certificate ValidityPeriod.
         * Default is true, which throws an error if current timestamp is not within ValidityPeriod.
         */
        checkValidity?: boolean;
        /**
         * Current timestamp for checking ValidityPeriod.
         * Default is Date.now().
         */
        now?: ValidityPeriod.TimestampInput;
    }
}
