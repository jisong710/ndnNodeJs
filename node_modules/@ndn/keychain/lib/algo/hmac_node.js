import { SigType, Verifier } from "@ndn/packet";
import { crypto } from "@ndn/util";
const GenParams = {
    name: "HMAC",
    hash: "SHA-256",
};
/** HmacWithSha256 signing algorithm. */
export const HMAC = {
    uuid: "d7001239-cb92-47b3-9376-2d1a781c70ac",
    sigType: SigType.HmacWithSha256,
    keyUsages: {
        secret: ["sign", "verify"],
    },
    async cryptoGenerate({ importRaw }, extractable) {
        let secretKey;
        if (importRaw) {
            secretKey = await crypto.subtle.importKey("raw", importRaw, GenParams, extractable, this.keyUsages.secret);
        }
        else {
            secretKey = await crypto.subtle.generateKey(GenParams, extractable, this.keyUsages.secret);
        }
        return {
            secretKey,
            jwkImportParams: GenParams,
            info: {},
        };
    },
    makeLLSign({ secretKey }) {
        return async (input) => {
            const h = await crypto.subtle.sign(GenParams.name, secretKey, input);
            return new Uint8Array(h);
        };
    },
    makeLLVerify({ secretKey }) {
        return async (input, sig) => {
            const ok = await crypto.subtle.verify(GenParams.name, secretKey, sig, input);
            Verifier.throwOnBadSig(ok);
        };
    },
};
