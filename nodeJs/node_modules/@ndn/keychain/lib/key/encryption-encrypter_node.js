import { assert } from "@ndn/util";
import { EncryptionAlgorithmListSlim } from "../algolist/mod_node.js";
import * as CertNaming from "../naming_node.js";
import { ImportCertCached, isPublicSecretKey } from "./impl-import-cert_node.js";
import { KeyKind } from "./types_node.js";
class PlainCryptoEncrypter {
    constructor(algo, key) {
        const pubkey = key;
        if (pubkey.publicKey) {
            this[KeyKind] = "public";
            this.llEncrypt = algo.makeLLEncrypt(pubkey);
            this.spki = pubkey.spki;
        }
        else {
            this[KeyKind] = "secret";
            this.llEncrypt = algo.makeLLEncrypt(key);
        }
    }
    [KeyKind];
    llEncrypt;
    spki;
}
class NamedCryptoEncrypter extends PlainCryptoEncrypter {
    name;
    constructor(name, algo, key) {
        super(algo, key);
        this.name = name;
        assert(CertNaming.isKeyName(name), `bad key name ${name}`);
    }
}
export function createEncrypter(arg1, arg2 = {}, arg3) {
    if (arg3) {
        return new NamedCryptoEncrypter(arg1, arg2, arg3);
    }
    if (isPublicSecretKey(arg2)) {
        return new PlainCryptoEncrypter(arg1, arg2);
    }
    return certEncrypters.importCert(arg1, arg2);
}
const certEncrypters = new ImportCertCached(NamedCryptoEncrypter, EncryptionAlgorithmListSlim);
