import { Name } from "@ndn/packet";
import { crypto } from "@ndn/util";
import * as CertNaming from "../naming_node.js";
/**
 * Implementation detail of generateSigningKey and generateEncryptionKey.
 * @param defaultAlgo default algorithm, required if algorithm may be omitted in `a`.
 * @param a tuple of [keyChain?: KeyChain, keyName: NameLike, algo?: Algorithm, genParams?: I].
 */
export async function generateKeyInternal(defaultAlgo, a) {
    let keyChain;
    if (typeof a[0].listKeys === "function") {
        keyChain = a.shift();
    }
    const keyName = CertNaming.makeKeyName(Name.from(a.shift()));
    const algo = a.shift() ?? defaultAlgo;
    const genParams = a.shift() ?? {};
    const useJwk = !!(keyChain?.needJwk);
    const gen = await algo.cryptoGenerate(genParams, useJwk);
    if (keyChain) {
        const stored = {
            algo: algo.uuid,
            info: gen.info,
        };
        if (gen.privateKey) {
            await saveAsymmetric(algo, stored, useJwk, gen);
        }
        else {
            await saveSymmetric(algo, stored, useJwk, gen);
        }
        await keyChain.insertKey(keyName, stored);
    }
    return [keyName, algo, gen];
}
async function saveAsymmetric(algo, stored, useJwk, gen) {
    if (useJwk) {
        [stored.privateKey, stored.publicKey] = await Promise.all([
            crypto.subtle.exportKey("jwk", gen.privateKey),
            crypto.subtle.exportKey("jwk", gen.publicKey),
        ]);
        stored.jwkImportParams = gen.jwkImportParams;
        gen.privateKey = await crypto.subtle.importKey("jwk", stored.privateKey, gen.jwkImportParams, false, algo.keyUsages.private);
    }
    else {
        stored.privateKey = gen.privateKey;
        stored.publicKey = gen.publicKey;
    }
    stored.publicKeySpki = gen.spki;
}
async function saveSymmetric(algo, stored, useJwk, gen) {
    if (useJwk) {
        stored.secretKey = await crypto.subtle.exportKey("jwk", gen.secretKey);
        stored.jwkImportParams = gen.jwkImportParams;
        gen.secretKey = await crypto.subtle.importKey("jwk", stored.secretKey, gen.jwkImportParams, false, algo.keyUsages.secret);
    }
    else {
        stored.secretKey = gen.secretKey;
    }
}
