import { crypto } from "@ndn/util";
import { extractSpkiAlgorithm } from "./impl-spki_browser.js";
export var RsaModulusLength;
(function (RsaModulusLength) {
    RsaModulusLength.Default = 2048;
    RsaModulusLength.Choices = [2048, 4096];
})(RsaModulusLength || (RsaModulusLength = {}));
export class RsaCommon {
    name;
    constructor(name, hash = "SHA-256") {
        this.name = name;
        this.importParams = { name, hash };
        this.genParams = {
            ...this.importParams,
            publicExponent: Uint8Array.of(0x01, 0x00, 0x01),
            modulusLength: RsaModulusLength.Default,
        };
    }
    importParams;
    genParams;
    async cryptoGenerate({ modulusLength = RsaModulusLength.Default, importPkcs8 }, extractable) {
        let privateKey;
        let publicKey;
        if (importPkcs8) {
            const [pkcs8, spki] = importPkcs8;
            [privateKey, publicKey] = await Promise.all([
                crypto.subtle.importKey("pkcs8", pkcs8, this.importParams, extractable, this.keyUsages.private),
                crypto.subtle.importKey("spki", spki, this.importParams, true, this.keyUsages.public),
            ]);
        }
        else {
            const genParams = {
                ...this.genParams,
                modulusLength,
            };
            ({ privateKey, publicKey } = await crypto.subtle.generateKey(genParams, extractable, [...this.keyUsages.private, ...this.keyUsages.public]));
        }
        const spki = new Uint8Array(await crypto.subtle.exportKey("spki", publicKey));
        return {
            privateKey,
            publicKey,
            jwkImportParams: this.importParams,
            spki,
            info: {},
        };
    }
    async importSpki(spki, der) {
        if (extractSpkiAlgorithm(der) !== "2A864886F70D010101") { // 1.2.840.113549.1.1.1
            throw new Error("not RSA key");
        }
        const key = await crypto.subtle.importKey("spki", spki, this.importParams, true, this.keyUsages.public);
        return {
            publicKey: key,
            spki,
            info: {},
        };
    }
}
